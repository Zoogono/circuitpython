name: Build Zoog

on:
  push:
  pull_request:
  release:
    types: [published]

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  scheduler:
    runs-on: ubuntu-22.04
    outputs:
      ports: ${{ steps.set-matrix.outputs.ports }}
      cp-version: ${{ steps.set-up-submodules.outputs.version }}
    steps:
    - name: Dump GitHub context
      run: echo "$GITHUB_CONTEXT"
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
    - name: Set up repository
      uses: actions/checkout@v4
      with:
        submodules: false
        show-progress: false
        fetch-depth: 1
    - name: Set up python
      uses: actions/setup-python@v5
      with:
        python-version: 3.x
    # - name: Duplicate USB VID/PID check
    #   run: python3 -u -m tools.ci_check_duplicate_usb_vid_pid
    - name: Set up submodules
      id: set-up-submodules
      uses: ./.github/actions/deps/submodules
      with:
        action: cache
        version: true
        private_ssh_key: ${{ secrets.PRIVATE_SUBMODULE_SSH_KEY }}

    - name: Set up external
      uses: ./.github/actions/deps/external
      with:
        action: cache
    - name: Set up mpy-cross
      uses: ./.github/actions/mpy_cross
      with:
        cp-version: ${{ steps.set-up-submodules.outputs.version }}
        download: false
    # - name: Get last commit with checks
    #   id: get-last-commit-with-checks
    #   if: github.event_name == 'pull_request'
    #   working-directory: tools
    #   run: python3 -u ci_changes_per_commit.py
    #   env:
    #     REPO: ${{ github.repository }}
    #     PULL: ${{ github.event.number }}
    #     GITHUB_TOKEN: ${{ github.token }}
    #     EXCLUDE_COMMIT: ${{ github.event.pull_request.head.sha }}
    # - name: Set head sha (pull)
    #   if: github.event_name == 'pull_request'
    #   run: echo "HEAD_SHA=${{ github.event.pull_request.head.sha }}" >> $GITHUB_ENV
    # - name: Set base sha (pull)
    #   if: github.event_name == 'pull_request'
    #   run: git cat-file -e $SHA && echo "BASE_SHA=$SHA" >> $GITHUB_ENV || true
    #   env:
    #     SHA: ${{ steps.get-last-commit-with-checks.outputs.commit_sha || github.event.pull_request.base.sha }}
    # - name: Set head sha (push)
    #   if: github.event_name == 'push'
    #   run: echo "HEAD_SHA=${{ github.event.after }}" >> $GITHUB_ENV
    # - name: Set base sha (push)
    #   if: github.event_name == 'push'
    #   run: git cat-file -e $SHA && echo "BASE_SHA=$SHA" >> $GITHUB_ENV || true
    #   env:
    #     SHA: ${{ github.event.before }}
    - name: Set matrix
      id: set-matrix
      run: python3 -u ci_set_matrix.py
      working-directory: tools
      env:
        CHANGED_FILES: '["ports/nrf/boards/zoog/mpconfig.mk"]'
        # LAST_FAILED_JOBS: ${{ steps.get-last-commit-with-checks.outputs.check_runs }}

  tests:
    needs: scheduler
    uses: ./.github/workflows/run-tests.yml
    with:
      cp-version: ${{ needs.scheduler.outputs.cp-version }}

  mpy-cross:
    needs: scheduler
    if: needs.scheduler.outputs.ports != '{}'
    uses: ./.github/workflows/build-mpy-cross.yml
    secrets: inherit
    with:
      cp-version: ${{ needs.scheduler.outputs.cp-version }}

  ports:
    needs: [scheduler, mpy-cross, tests]
    if: needs.scheduler.outputs.ports != '{}'
    uses: ./.github/workflows/build-boards.yml
    secrets: inherit
    strategy:
      fail-fast: false
      matrix:
        port: ${{ fromJSON(needs.scheduler.outputs.ports).ports }}
    with:
      boards: ${{ toJSON(fromJSON(needs.scheduler.outputs.ports)[matrix.port]) }}
      cp-version: ${{ needs.scheduler.outputs.cp-version }}

  # build-arm:
  #   runs-on: ubuntu-20.04
  #   needs: test
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       board: ${{ fromJSON(needs.test.outputs.boards-arm) }}
  #   if: ${{ needs.test.outputs.boards-arm != '[]' }}
  #   steps:
  #   - name: Set up Python 3
  #     uses: actions/setup-python@v2
  #     with:
  #       python-version: "3.x"
  #   - uses: actions/checkout@v2.2.0
  #     with:
  #       submodules: false
  #       fetch-depth: 1
  #   - name: Get CP deps
  #     env:
  #       SSH_KEY: ${{ secrets.PRIVATE_SUBMODULE_SSH_KEY }}
  #     run: |
  #       mkdir $HOME/.ssh && echo "${{ env.SSH_KEY }}" > $HOME/.ssh/id_rsa && chmod 600 $HOME/.ssh/id_rsa
  #       python tools/ci_fetch_deps.py ${{ matrix.board }} ${{ github.sha }}
  #   - name: Install dependencies
  #     run: |
  #       sudo apt-get install -y gettext
  #       pip install -r requirements-ci.txt -r requirements-dev.txt
  #       wget --no-verbose https://adafruit-circuit-python.s3.amazonaws.com/gcc-arm-none-eabi-10-2020-q4-major-x86_64-linux.tar.bz2
  #       sudo tar -C /usr --strip-components=1 -xaf gcc-arm-none-eabi-10-2020-q4-major-x86_64-linux.tar.bz2
  #   - name: Versions
  #     run: |
  #       gcc --version
  #       arm-none-eabi-gcc --version
  #       python3 --version
  #   - name: mpy-cross
  #     run: make -C mpy-cross -j2
  #   - name: Setup build failure matcher
  #     run: echo "::add-matcher::$GITHUB_WORKSPACE/.github/workflows/match-build-fail.json"
  #   - name: build
  #     run: python3 -u build_release_files.py
  #     working-directory: tools
  #     env:
  #       REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
  #       BOARDS: ${{ matrix.board }}
  #   - uses: actions/upload-artifact@v2
  #     with:
  #       name: ${{ matrix.board }}
  #       path: bin/${{ matrix.board }}
  #   - name: Upload Release Asset
  #     uses: softprops/action-gh-release@v1
  #     if: ${{ github.event_name == 'release' }}
  #     env:
  #       RELEASE_WRITE_TOKEN: ${{ secrets.RELEASE_WRITE_TOKEN }}
  #     with:
  #       files: |
  #         bin/${{ matrix.board }}/**/*
  #       token: ${{ env.RELEASE_WRITE_TOKEN }}
